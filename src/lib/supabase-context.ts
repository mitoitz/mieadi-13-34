import { supabase } from '@/integrations/supabase/client';

/**
 * Utilit√°rio para garantir que as opera√ß√µes do Supabase tenham o contexto correto
 * especialmente importante para autentica√ß√£o h√≠brida (local + Supabase)
 */

// Interceptor para automaticamente definir contexto antes de opera√ß√µes sens√≠veis
let isInterceptorSet = false;

export function setupSupabaseInterceptor() {
  if (isInterceptorSet) return;
  
  // Em vez de interceptar o cliente, vamos criar uma fun√ß√£o wrapper
  console.log('‚úÖ Sistema de contexto Supabase configurado (sem interceptor)');
  isInterceptorSet = true;
}

/**
 * Garante que o contexto do usu√°rio est√° definido para RLS
 */
async function ensureUserContext(): Promise<void> {
  try {
    // Verificar se h√° sess√£o ativa do Supabase
    const { data: { session } } = await supabase.auth.getSession();
    
    if (session?.user) {
      console.log('‚úÖ Sess√£o Supabase ativa:', session.user.id);
      return;
    }

    // Se n√£o h√° sess√£o Supabase, usar autentica√ß√£o local
    const currentUser = JSON.parse(localStorage.getItem('currentUser') || '{}');
    
    if (currentUser.cpf && currentUser.role) {
      console.log('üîê Usu√°rio local encontrado:', currentUser.cpf);
      console.log('‚úÖ Contexto dispon√≠vel via localStorage');
    } else {
      console.warn('‚ö†Ô∏è Nenhum contexto de usu√°rio dispon√≠vel');
    }
  } catch (error) {
    console.error('‚ùå Erro ao garantir contexto do usu√°rio:', error);
  }
}

/**
 * Verifica se h√° token/sess√£o v√°lida e retorna informa√ß√µes de debug
 */
export async function debugAuthState(): Promise<{
  hasSupabaseSession: boolean;
  hasLocalSession: boolean;
  currentUser: any;
  sessionInfo: any;
}> {
  try {
    // Verificar sess√£o Supabase
    const { data: { session }, error } = await supabase.auth.getSession();
    
    // Verificar sess√£o local
    const localSession = localStorage.getItem('mieadi_user_session');
    const currentUser = JSON.parse(localStorage.getItem('currentUser') || '{}');
    
    const debugInfo = {
      hasSupabaseSession: !!session,
      hasLocalSession: !!localSession,
      currentUser,
      sessionInfo: session ? {
        userId: session.user?.id,
        email: session.user?.email,
        expiresAt: session.expires_at
      } : null,
      error: error?.message
    };
    
    console.log('üîç Estado da autentica√ß√£o:', debugInfo);
    return debugInfo;
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar estado da autentica√ß√£o:', error);
    return {
      hasSupabaseSession: false,
      hasLocalSession: false,
      currentUser: null,
      sessionInfo: null
    };
  }
}

/**
 * For√ßa o estabelecimento do contexto do usu√°rio
 */
export async function forceUserContext(): Promise<boolean> {
  console.log('üîÑ For√ßando estabelecimento do contexto...');
  
  try {
    await ensureUserContext();
    
    // Testar se o contexto funciona
    const { data, error } = await supabase
      .from('profiles')
      .select('count')
      .limit(1);
      
    if (error) {
      console.error('‚ùå Teste de contexto falhou:', error);
      return false;
    }
    
    console.log('‚úÖ Contexto funcionando corretamente');
    return true;
    
  } catch (error) {
    console.error('‚ùå Erro ao for√ßar contexto:', error);
    return false;
  }
}

// Configurar interceptor automaticamente
setupSupabaseInterceptor();