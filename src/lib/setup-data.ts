import { supabase } from "@/integrations/supabase/client";
import bcrypt from 'bcryptjs';

// Fun√ß√£o para criar dados iniciais do sistema
export const setupInitialData = async () => {
  console.log('üöÄ Iniciando configura√ß√£o de dados iniciais...');
  
  try {
    // 1. Verificar e criar congrega√ß√µes b√°sicas
    await createInitialCongregations();
    
    // 2. Verificar e criar campos ministeriais b√°sicos
    await createInitialFields();
    
    // 3. Verificar e criar cursos b√°sicos
    await createInitialCourses();
    
    // 4. Verificar e criar disciplinas b√°sicas
    await createInitialSubjects();
    
    // 5. Verificar e criar usu√°rio admin se n√£o existir
    await createAdminUser();
    
    console.log('‚úÖ Configura√ß√£o de dados iniciais conclu√≠da!');
    
  } catch (error) {
    console.error('‚ùå Erro na configura√ß√£o inicial:', error);
    throw error;
  }
};

// Criar congrega√ß√µes iniciais
const createInitialCongregations = async () => {
  const { data: existing } = await supabase
    .from('congregations')
    .select('id')
    .limit(1);
    
  if (existing && existing.length > 0) {
    console.log('‚úì Congrega√ß√µes j√° existem');
    return;
  }
  
  const congregations = [
    {
      name: "Igreja Central",
      address: "Rua Principal, 123",
      city: "S√£o Paulo",
      state: "SP",
      postal_code: "01000-000",
      phone: "(11) 99999-9999",
      email: "central@mieadi.com.br",
      pastor_name: "Pastor Principal"
    },
    {
      name: "Igreja Vila Nova",
      address: "Av. Nova, 456", 
      city: "S√£o Paulo",
      state: "SP",
      postal_code: "02000-000",
      phone: "(11) 88888-8888",
      email: "vilanova@mieadi.com.br",
      pastor_name: "Pastor Auxiliar"
    }
  ];
  
  const { error } = await supabase
    .from('congregations')
    .insert(congregations);
    
  if (error) throw error;
  console.log('‚úÖ Congrega√ß√µes criadas');
};

// Criar campos ministeriais
const createInitialFields = async () => {
  const { data: existing } = await supabase
    .from('fields')
    .select('id')
    .limit(1);
    
  if (existing && existing.length > 0) {
    console.log('‚úì Campos ministeriais j√° existem');
    return;
  }
  
  const fields = [
    {
      name: "Minist√©rio de Ensino",
      description: "Respons√°vel pela educa√ß√£o teol√≥gica e acad√™mica"
    },
    {
      name: "Minist√©rio de Evangelismo", 
      description: "Respons√°vel pela evangeliza√ß√£o e miss√µes"
    },
    {
      name: "Minist√©rio de Louvor",
      description: "Respons√°vel pela m√∫sica e adora√ß√£o"
    },
    {
      name: "Minist√©rio de Assist√™ncia Social",
      description: "Respons√°vel pela a√ß√£o social e comunit√°ria"
    }
  ];
  
  const { error } = await supabase
    .from('fields')
    .insert(fields);
    
  if (error) throw error;
  console.log('‚úÖ Campos ministeriais criados');
};

// Criar cursos b√°sicos
const createInitialCourses = async () => {
  const { data: existing } = await supabase
    .from('courses')
    .select('id')
    .limit(1);
    
  if (existing && existing.length > 0) {
    console.log('‚úì Cursos j√° existem');
    return;
  }
  
  const courses = [
    {
      name: "Teologia B√°sica",
      description: "Curso introdut√≥rio de teologia para novos membros",
      duration_months: 12,
      total_credits: 60
    },
    {
      name: "Teologia Intermedi√°ria",
      description: "Curso intermedi√°rio de teologia",
      duration_months: 18,
      total_credits: 90
    },
    {
      name: "Bacharel em Teologia",
      description: "Curso superior de teologia", 
      duration_months: 36,
      total_credits: 180
    },
    {
      name: "Minist√©rio Pastoral",
      description: "Forma√ß√£o espec√≠fica para pastores",
      duration_months: 24,
      total_credits: 120
    }
  ];
  
  const { error } = await supabase
    .from('courses')
    .insert(courses);
    
  if (error) throw error;
  console.log('‚úÖ Cursos criados');
};

// Criar disciplinas b√°sicas
const createInitialSubjects = async () => {
  const { data: existing } = await supabase
    .from('subjects')
    .select('id')
    .limit(1);
    
  if (existing && existing.length > 0) {
    console.log('‚úì Disciplinas j√° existem');
    return;
  }
  
  const subjects = [
    {
      name: "B√≠blia Sagrada I",
      description: "Introdu√ß√£o ao estudo das Sagradas Escrituras",
      credits: 4,
      workload_hours: 60
    },
    {
      name: "B√≠blia Sagrada II", 
      description: "Aprofundamento no estudo b√≠blico",
      credits: 4,
      workload_hours: 60
    },
    {
      name: "Teologia Sistem√°tica I",
      description: "Fundamentos da teologia sistem√°tica",
      credits: 6,
      workload_hours: 90
    },
    {
      name: "Hist√≥ria da Igreja",
      description: "Hist√≥ria do cristianismo atrav√©s dos s√©culos",
      credits: 4,
      workload_hours: 60
    },
    {
      name: "Homil√©tica",
      description: "Arte da prega√ß√£o e comunica√ß√£o crist√£",
      credits: 4,
      workload_hours: 60
    },
    {
      name: "Grego B√≠blico",
      description: "Estudo do grego do Novo Testamento",
      credits: 6,
      workload_hours: 90
    },
    {
      name: "Hebraico B√≠blico",
      description: "Estudo do hebraico do Antigo Testamento", 
      credits: 6,
      workload_hours: 90
    },
    {
      name: "√âtica Crist√£",
      description: "Princ√≠pios √©ticos na perspectiva crist√£",
      credits: 4,
      workload_hours: 60
    }
  ];
  
  const { error } = await supabase
    .from('subjects')
    .insert(subjects);
    
  if (error) throw error;
  console.log('‚úÖ Disciplinas criadas');
};

// Criar usu√°rio admin se n√£o existir
const createAdminUser = async () => {
  const { data: adminExists } = await supabase
    .from('profiles')
    .select('id')
    .eq('cpf', '00000000001')
    .maybeSingle();
    
  if (adminExists) {
    console.log('‚úì Usu√°rio admin j√° existe');
    return;
  }
  
  // Criar senha hash
  const passwordHash = await bcrypt.hash('admin123', 10);
  
  const adminUser = {
    id: '00000000-0000-0000-0000-000000000002',
    full_name: 'Diretor Sistema',
    email: 'admin@mieadi.com.br',
    cpf: '00000000001',
    role: 'admin' as const,
    status: 'ativo' as const,
    first_login: false,
    terms_accepted: true,
    privacy_policy_accepted: true
  };
  
  const { error } = await supabase
    .from('profiles')
    .insert([adminUser]);
    
  if (error) throw error;
  console.log('‚úÖ Usu√°rio admin criado (CPF: 000.000.000-01, Senha: admin123)');
};

// Fun√ß√£o para executar setup completo
export const runCompleteSetup = async () => {
  try {
    await setupInitialData();
    return {
      success: true,
      message: 'Sistema configurado com sucesso!',
      credentials: {
        cpf: '000.000.000-01',
        password: 'admin123'
      }
    };
  } catch (error: any) {
    return {
      success: false,
      message: `Erro na configura√ß√£o: ${error.message}`
    };
  }
};

// Disponibilizar globalmente para teste
if (typeof window !== 'undefined') {
  (window as any).setupMieadiSystem = runCompleteSetup;
}